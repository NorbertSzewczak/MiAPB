<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CodebuddyPersistentProjectState">
    <option name="autoFileSelection" value="true" />
    <option name="promptHistory">
      <list>
        <option value="you" />
        <option value="Traceback (most recent call last):&#10;  File &quot;C:\Users\Jakub\Kuba_lokalne\studia\semestr_VIII\MiAPB\MiAPB\processing\extractor.py&quot;, line 77, in &lt;module&gt;&#10;    decisions, input_data = extract_dmn_structure(absolute_path)&#10;                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;C:\Users\Jakub\Kuba_lokalne\studia\semestr_VIII\MiAPB\MiAPB\processing\extractor.py&quot;, line 52, in extract_dmn_structure&#10;    tree = ET.parse(xml_file_path)&#10;           ^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;C:\Users\Jakub\AppData\Local\Programs\Python\Python311\Lib\xml\etree\ElementTree.py&quot;, line 1219, in parse&#10;    tree.parse(source, parser)&#10;  File &quot;C:\Users\Jakub\AppData\Local\Programs\Python\Python311\Lib\xml\etree\ElementTree.py&quot;, line 570, in parse&#10;    source = open(source, &quot;rb&quot;)&#10;             ^^^^^^^^^^^^^^^^^^&#10;FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\Jakub\\Kuba_lokalne\\studia\\semestr_VIII\\MiAPB\\MiAPB\\processing\\event_logs\\d1.xml'" />
        <option value="d1.dmn" />
        <option value="d1.dmn is located in different folder but same projekt. i am using an absolute path by pathlib" />
        <option value="ok, try now" />
        <option value="ok, now in the dmn_model i would like to implement structure of dmn based on that  Definition 2 ADMNdecision requirement diagram is a tuple DM = (D,I,RI,TD),&#10; where:– Dis the set of decision nodes,– I is the set of input data nodes,– Bis the set of business knowledge model nodes,– Kis the set of knowledge source nodes,– RI ⊆D∪I×D is the set of information requirements,– RK⊆D∪I×Dis the set of knowledge requirements,– RA ⊆B×D∪Bis the set of authority requirements,– TD is a set of the decision tables related to decision nodes (usually a single&#10; decision table for a specific decision node).&#10;in file4 extractor i would like to implement .dmn file loading and writing it to a structure of dmn_model.py whith class containing all decision models, data_nodes, business knowledge model nodes, knowledge source nodes and all connections of them base on fraft In the temporary refined decision model, find the set of start decision el&#10;ements Dstart ⊆ D (the decisions which does not use as input any other&#10; decision i.e. there is no information requirement pointing to this decision&#10; from other decision), and construct the subset Istart ⊆ I of input data used&#10; by these start decisions.&#10; 3. For each input data i ∈ Istart:&#10; (a) if i contains any keyword from the set Keywords(start event), create a&#10; message start event estart ∈ E with the name:&#10; name(estart) = ”name(i) + received”,&#10; (b) otherwise, create a user task τUser ∈ T named:&#10; name(τUser) = ”Provide +name(i)”.&#10; 4. For each decision d ∈ Dstart create a corresponding Business Rule task&#10; τBR ∈ T with the name created in the following way:&#10; (a) if the output type of the decision table td ∈ TD is number, choose the&#10; most popular collocation name(τBR) = ”V erb(Calculate)i +name(d)”,&#10; (b) if the output type of the decision table td ∈ TD boolean, string or enum,&#10; choose the most popular collocation name(τBR) = ”Verb(Decide)i +&#10; name(d)”,&#10; (c) otherwise (the output type not known) choose the most popular collo&#10;cation name(τBR) = ”Verb(Decide ∪Calculate)i + name(d)”.&#10; Create also a relation to the DMN decision map(τBR) = d.&#10; 5. For each business knowledge model b ∈ B connected to the decisions from&#10; Dstart, create a corresponding data store or data object depending on the&#10; keywords from Keywords(data stores) or Keywords(data objects):&#10; (a) if name(b) contains a keyword of data store, create a data store,&#10; (b) if name(b) contains a keyword of data object, create a data object,&#10; (c) otherwise, create a corresponding annotation.&#10; 6. For each knowledge source k ∈ K connected to the decisions from Dstart,&#10; create an annotation a ∈ A connected to the corresponding task τBR.&#10; 7. For each knowledge source k ∈ K connected to the business knowledge model&#10; from Bstart, create an annotation a ∈ A connected to the corresponding data&#10; object." />
        <option value="Traceback (most recent call last):&#10;  File &quot;C:\Users\Jakub\Kuba_lokalne\studia\semestr_VIII\MiAPB\MiAPB\processing\extractor.py&quot;, line 123, in &lt;module&gt;&#10;    dmn_model = extract_dmn_model(absolute_path)&#10;                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;C:\Users\Jakub\Kuba_lokalne\studia\semestr_VIII\MiAPB\MiAPB\processing\extractor.py&quot;, line 96, in extract_dmn_model&#10;    table = extract_decision_table(decision_table)&#10;            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;  File &quot;C:\Users\Jakub\Kuba_lokalne\studia\semestr_VIII\MiAPB\MiAPB\processing\extractor.py&quot;, line 50, in extract_decision_table&#10;    output_expressions.append(output_clause.find('dmn:outputExpression', DMN_NAMESPACE).text)&#10;                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#10;AttributeError: 'NoneType' object has no attribute 'text'&#10;" />
      </list>
    </option>
    <option name="selectedModel" value="codebuddy:CLAUDE_3.5_SONNET_V7" />
  </component>
</project>